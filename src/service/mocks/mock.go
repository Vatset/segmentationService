// Code generated by MockGen. DO NOT EDIT.
// Source: service.go

// Package mock_service is a generated GoMock package.
package mock_service

import (
	reflect "reflect"
	segmentationService "segmentationService"

	gomock "github.com/golang/mock/gomock"
)

// MockUser is a mock of User interface.
type MockUser struct {
	ctrl     *gomock.Controller
	recorder *MockUserMockRecorder
}

// MockUserMockRecorder is the mock recorder for MockUser.
type MockUserMockRecorder struct {
	mock *MockUser
}

// NewMockUser creates a new mock instance.
func NewMockUser(ctrl *gomock.Controller) *MockUser {
	mock := &MockUser{ctrl: ctrl}
	mock.recorder = &MockUserMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUser) EXPECT() *MockUserMockRecorder {
	return m.recorder
}

// CreateLinkToCSV mocks base method.
func (m *MockUser) CreateLinkToCSV(userID int, period, startDate, endDate string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateLinkToCSV", userID, period, startDate, endDate)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateLinkToCSV indicates an expected call of CreateLinkToCSV.
func (mr *MockUserMockRecorder) CreateLinkToCSV(userID, period, startDate, endDate interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateLinkToCSV", reflect.TypeOf((*MockUser)(nil).CreateLinkToCSV), userID, period, startDate, endDate)
}

// CreateUser mocks base method.
func (m *MockUser) CreateUser(user segmentationService.User) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateUser", user)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateUser indicates an expected call of CreateUser.
func (mr *MockUserMockRecorder) CreateUser(user interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateUser", reflect.TypeOf((*MockUser)(nil).CreateUser), user)
}

// DeleteUser mocks base method.
func (m *MockUser) DeleteUser(user segmentationService.User) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteUser", user)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteUser indicates an expected call of DeleteUser.
func (mr *MockUserMockRecorder) DeleteUser(user interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteUser", reflect.TypeOf((*MockUser)(nil).DeleteUser), user)
}

// ShowHistory mocks base method.
func (m *MockUser) ShowHistory(userID int, startDate, endDate string) ([]segmentationService.ShowHistory, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ShowHistory", userID, startDate, endDate)
	ret0, _ := ret[0].([]segmentationService.ShowHistory)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ShowHistory indicates an expected call of ShowHistory.
func (mr *MockUserMockRecorder) ShowHistory(userID, startDate, endDate interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ShowHistory", reflect.TypeOf((*MockUser)(nil).ShowHistory), userID, startDate, endDate)
}

// ShowUserSegments mocks base method.
func (m *MockUser) ShowUserSegments(userId int) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ShowUserSegments", userId)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ShowUserSegments indicates an expected call of ShowUserSegments.
func (mr *MockUserMockRecorder) ShowUserSegments(userId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ShowUserSegments", reflect.TypeOf((*MockUser)(nil).ShowUserSegments), userId)
}

// MockSegment is a mock of Segment interface.
type MockSegment struct {
	ctrl     *gomock.Controller
	recorder *MockSegmentMockRecorder
}

// MockSegmentMockRecorder is the mock recorder for MockSegment.
type MockSegmentMockRecorder struct {
	mock *MockSegment
}

// NewMockSegment creates a new mock instance.
func NewMockSegment(ctrl *gomock.Controller) *MockSegment {
	mock := &MockSegment{ctrl: ctrl}
	mock.recorder = &MockSegmentMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockSegment) EXPECT() *MockSegmentMockRecorder {
	return m.recorder
}

// CreateSegment mocks base method.
func (m *MockSegment) CreateSegment(segment segmentationService.SegmentPattern) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateSegment", segment)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateSegment indicates an expected call of CreateSegment.
func (mr *MockSegmentMockRecorder) CreateSegment(segment interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateSegment", reflect.TypeOf((*MockSegment)(nil).CreateSegment), segment)
}

// DeleteSegment mocks base method.
func (m *MockSegment) DeleteSegment(pattern segmentationService.SegmentPattern, input segmentationService.Segmentation) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteSegment", pattern, input)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteSegment indicates an expected call of DeleteSegment.
func (mr *MockSegmentMockRecorder) DeleteSegment(pattern, input interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteSegment", reflect.TypeOf((*MockSegment)(nil).DeleteSegment), pattern, input)
}

// UpdateSegment mocks base method.
func (m *MockSegment) UpdateSegment(pattern segmentationService.UpdateSegment) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateSegment", pattern)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateSegment indicates an expected call of UpdateSegment.
func (mr *MockSegmentMockRecorder) UpdateSegment(pattern interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateSegment", reflect.TypeOf((*MockSegment)(nil).UpdateSegment), pattern)
}

// MockSegmentation is a mock of Segmentation interface.
type MockSegmentation struct {
	ctrl     *gomock.Controller
	recorder *MockSegmentationMockRecorder
}

// MockSegmentationMockRecorder is the mock recorder for MockSegmentation.
type MockSegmentationMockRecorder struct {
	mock *MockSegmentation
}

// NewMockSegmentation creates a new mock instance.
func NewMockSegmentation(ctrl *gomock.Controller) *MockSegmentation {
	mock := &MockSegmentation{ctrl: ctrl}
	mock.recorder = &MockSegmentationMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockSegmentation) EXPECT() *MockSegmentationMockRecorder {
	return m.recorder
}

// AutoSegmentation mocks base method.
func (m *MockSegmentation) AutoSegmentation(percent int, segment string, input segmentationService.Segmentation) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AutoSegmentation", percent, segment, input)
	ret0, _ := ret[0].(error)
	return ret0
}

// AutoSegmentation indicates an expected call of AutoSegmentation.
func (mr *MockSegmentationMockRecorder) AutoSegmentation(percent, segment, input interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AutoSegmentation", reflect.TypeOf((*MockSegmentation)(nil).AutoSegmentation), percent, segment, input)
}

// SegmentChecker mocks base method.
func (m *MockSegmentation) SegmentChecker(input segmentationService.Segmentation) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SegmentChecker", input)
	ret0, _ := ret[0].(error)
	return ret0
}

// SegmentChecker indicates an expected call of SegmentChecker.
func (mr *MockSegmentationMockRecorder) SegmentChecker(input interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SegmentChecker", reflect.TypeOf((*MockSegmentation)(nil).SegmentChecker), input)
}

// SegmentMembership mocks base method.
func (m *MockSegmentation) SegmentMembership(input segmentationService.Segmentation) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SegmentMembership", input)
	ret0, _ := ret[0].(error)
	return ret0
}

// SegmentMembership indicates an expected call of SegmentMembership.
func (mr *MockSegmentationMockRecorder) SegmentMembership(input interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SegmentMembership", reflect.TypeOf((*MockSegmentation)(nil).SegmentMembership), input)
}
